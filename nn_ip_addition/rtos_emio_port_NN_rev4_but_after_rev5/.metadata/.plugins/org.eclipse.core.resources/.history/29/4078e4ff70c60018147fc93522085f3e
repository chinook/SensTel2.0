/*
 * senstel_sd.c
 *
 *  Created on: May 8, 2018
 *      Author: Jerome Pare-Lepine
 */

//==============================================================================
// INCLUDES
//==============================================================================
#include <stdio.h>
#include "xparameters.h"	/* SDK generated parameters */
#include "xsdps.h"		/* SD device driver */
#include "diskio.h"
#include "xil_printf.h"
#include "ff.h"
#include "senstel_sd.h"
#include "senstel_sd_filesys_config.h"


int ulMountFs(FATFS *ffs, FIL *file)
// used
/*
* \brief       Register the file object to the file system
*              object. Mounting the filesystem has to be done before
*              trying to write anything to the SD card.
*              Check that your micro sd to sd card adapter is not set to
*              "lock".
*
* \param[in]   ffs         - Pointer to the structure instance of the file system object.
*
* \param[in]   file        - Pointer to the structure instance of the file object.
*
* \returns     Sen         - 0 if no errors happened.
*/
{
	FRESULT Res;
	BYTE ini_s;

	ini_s = disk_initialize(XPAR_PS7_SD_1_DEVICE_ID);

	/*
	 * To test logical drive 0, Path should be "0:/"
	 * For logical drive 1, Path should be "1:/"
	 */
	TCHAR *Path = "0:/";

	/*
	 * Register volume work area, initialize device
	 */
	Res = f_mount(ffs, Path, 1);

	if (Res != FR_OK) {
		return XST_FAILURE;
	}

	/*
	 * Path - Path to logical driver, 0 - FDISK format.
	 * 0 - Cluster size is automatically determined based on Vol size.
	 */
	Res = f_mkfs(Path, 0, 0);
	if (Res != FR_OK) {
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

int ulOpenFile(FIL *file)
// used
/*
* \brief       Register a new bias, or zero value, into a sensor profile.
*              This value is taken into account upon sensor data conversion.
*
* \param[in]   Sen         - Enum value of the sensor for which the zero is to
*                            be registered.
*/
{
	FRESULT Res;
	TCHAR *fname = "ACQ1.txt";

	Res = f_open(
			file,
			fname,
			FA_CREATE_ALWAYS | FA_WRITE | FA_READ
			);

	if (Res) {
		return XST_FAILURE;
	}

	/*
	 * Pointer to beginning of file.
	 */
	Res = f_lseek(file, 0);
	if (Res) {
		return XST_FAILURE;
	}


	return XST_SUCCESS;
}


int ulDumpToFile(FIL *File, u32 *data)
/*
* \brief       Register a new bias, or zero value, into a sensor profile.
*              This value is taken into account upon sensor data conversion.
*
* \param[in]   Sen         - Enum value of the sensor for which the zero is to
*                            be registered.
*/
{
	FRESULT Res;

	/*
	 * Write data to file.
	 */
	Res = f_printf(File, "This is: %d", &data);
//	Res = f_printf("%f, %f, %f, %f, %f, %f, %f, %f\r\n",
//						tmpArray[Cv7_Wspd],
//						tmpArray[Cv7_Wdir],
//						tmpArray[PitchAbsEnc],
//						tmpArray[GearAbsEnc],
//						tmpArray[TurbineIncEnc],
//						tmpArray[AxleIncEnc],
//						tmpArray[TurbineTorque],
//						tmpArray[LoadCell]
//						);
//	Res = f_write(File, (const void*)SourceAddress, FileSize,
//			&NumBytesWritten);
	if (Res < 0) {
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}


int ulCloseFiles(FIL *file)
/*
* \brief       Register a new bias, or zero value, into a sensor profile.
*              This value is taken into account upon sensor data conversion.
*
* \param[in]   Sen         - Enum value of the sensor for which the zero is to
*                            be registered.
*/
// used
{
	FRESULT Res;

	Res = f_close(file);
	if(Res < 0) return XST_FAILURE;
	return XST_SUCCESS;
}


int ulUnmountFs(FATFS *ffs)
/*
* \brief       Register a new bias, or zero value, into a sensor profile.
*              This value is taken into account upon sensor data conversion.
*
* \param[in]   Sen         - Enum value of the sensor for which the zero is to
*                            be registered.
*/
// used
{
	FRESULT Res;

	Res = f_mount(NULL, "", 1);
	if (Res < 0) {
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}
