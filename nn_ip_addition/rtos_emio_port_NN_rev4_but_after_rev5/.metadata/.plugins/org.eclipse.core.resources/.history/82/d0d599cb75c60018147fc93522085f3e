/*
 * setup.c
 *
 *  Created on: May 27, 2018
 *      Author: Jerome Pare-Lepine
 */

//==============================================================================
// INCLUDES
//==============================================================================
#include "setup.h"
#include "interrupts.h"
#include "inputcapture.h"
#include "i2c.h"


//==============================================================================
// PUBLIC VARIABLES
//==============================================================================
static XCanPs Can0Inst;
static XUartPs Uart0Inst, Uart1Inst;
static XTmrCtr TmrCtr0Inst, TmrCtr1Inst;
static XIicPs Iic0Inst, Iic1Inst;
static XGpioPs EmioBankInst;
static XScuTimer PrvCoreTimer;
static XSpiPs Spi0Inst;

extern XScuGic xInterruptController;


//==============================================================================
// FUNCTION DEFINITIONS
//==============================================================================
void CreatePeriphInstances(sPeriphInstances_t *pinst)
/*
* \brief       Peripherals' structure instances are regrouped in a single
*              structure.
*
* \param[in]   pinst         - Ptr to the peripheral group's structure.
*
*/
{
	pinst->CanInst = &Can0Inst;
	pinst->Cv7UartInst = &Uart0Inst;
	pinst->SerialUartInst = &Uart1Inst;
	pinst->TmrCtr0Inst = &TmrCtr0Inst;
	pinst->TmrCtr1Inst = &TmrCtr1Inst;
	pinst->Iic0Inst = &Iic0Inst;
	pinst->Iic1Inst = &Iic1Inst;
	pinst->EmioBankPins = &EmioBankInst;
	pinst->CoreTimer = &PrvCoreTimer;
	pinst->SpiInst = &Spi0Inst;
}


void InitPeripherals(sPeriphInstances_t *pinst)
/*
* \brief       All of the peripherals' initialization functions are
*              called at once. This doesn't include the interrupts.
*
* \param[in]   pinst         - Ptr to the peripheral group's structure.
*
*/
{
	CreatePeriphInstances(pinst);
	InitHandlersArray(&ExceptionHandlers);

	InitCan(pinst->CanInst, CAN0_ID);
	InitTmrCtrs(pinst->TmrCtr0Inst);
	InitUartPeripherals(pinst->SerialUartInst, pinst->Cv7UartInst);
	InitI2CPeripherals(pinst->Iic1Inst, I2C_ADDRESS);
	initSSIpins(pinst->EmioBankPins);
	InitScuTimer(pinst->CoreTimer, XPAR_XSCUTIMER_0_DEVICE_ID);
	InitLoRaRadio(pinst->EmioBankPins, pinst->SpiInst);

	InitCanInterrupts(pinst->CanInst, CAN0_INTR_ID);
	InitTmrCtrInterrupts(pinst->TmrCtr0Inst);
	InitUartInterrupts(pinst->Cv7UartInst, UART1_INTR_ID);
}

void StartPeripheralInterrupts(sPeriphInstances_t *pinst)
/*
* \brief       Sets up the interrupts for the peripherals that
*              implements them and registers their interrupt handler.
*              The interrupts are then started.
*
* \param[in]   pinst         - Ptr to the peripheral group's structure.
*
*/
{
	SetupInterruptSystem(&xInterruptController, &ExceptionHandlers);	//IntC instance is from Freertos port
	StartCanInterrupts(pinst->CanInst);
	StartUartInterrupts(pinst->Cv7UartInst);
	StartScuTimerInterrupts(pinst->CoreTimer);
	StartScuGicInterrupts();
	/* The IC tasks control the tmr ctr interrupts,
	 * no need to start them here */

}


