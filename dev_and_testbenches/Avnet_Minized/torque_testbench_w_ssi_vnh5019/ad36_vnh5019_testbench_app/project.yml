---

# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.

:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
#  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: vendor/ceedling
  :default_tasks:
    - test:all

#:release_build:
#  :output: MyApp.out
#  :use_assembly: FALSE

:environment:
- :path:
    - 'C:\Xilinx\SDK\2017.2\gnuwin\bin'
    #- 'C:\Xilinx\Vivado\2017.2\tps\mingw\4.9.1\win64.o\nt64\bin'
    #- 'C:\Xilinx\Vivado\2017.2\tps\mingw\6.2.0\win64.o\nt\bin'
    - 'C:\Xilinx\Vivado\2017.2\tps\mingw\4.4.3\win64.o\nt64\bin'
    #- 'C:\Xilinx\Vivado\2017.2\tps\mingw\6.2.0\win64.o\nt\x86_64-w64-mingw32\lib'
    #- 'C:\Xilinx\Vivado\2017.2\tps\mingw'

:extension:
  :executable: .out

:paths:
  :test:
    - +:test/**
    - -:test/support
  :source:
    - src/**
    #- 'C:/Xilinx\SDK\2017.2\gnu/aarch32\nt\gcc-arm-none-eabi\arm-none-eabi\libc\usr\include'
    #- 'C:/Xilinx/SDK/2017.2/gnu/aarch32/nt/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/6.2.1/include'
    #- 'C:/Xilinx/SDK/2017.2/gnu/aarch32/nt/gcc-arm-none-eabi/arm-none-eabi/include'
    #- 'C:/Xilinx/SDK/2017.2/gnu/aarch32/nt/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/6.2.1/include-fixed'
    #- 'C:\Xilinx\Vivado\2017.2\tps\mingw\4.9.1\win64.o\nt64\lib\gcc\x86_64-w64-mingw32\4.9.1'
  :support:
    - test/support

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :commmon: &common_defines []
  :test:
    - *common_defines
    - TEST
  :test_preprocess:
    - *common_defines
    - TEST

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8
    
:module_generator:
  :project_root: ./
  :source_root: src/
  :test_root: test/

:gcov:
    :html_report_type: basic

#:tools:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "${1}"  # or "-L ${1}" for example
  :common: 
    - &common_libraries []
    
  :test:
    - *common_libraries
  :release:
    - *common_libraries

:plugins:
  :load_paths:
    - vendor/ceedling/plugins
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
...
