/*
 * main.c
 *
 *  Created on: Mar 31, 2018
 *      Author: Jerome Pare-Lepine
 *      Comments: Strongly inspired by Avnet's PS I2C example
 */
#include <stdio.h>
#include "xparameters.h"
#include "xiicps.h"
#include "xstatus.h"
#include "xil_printf.h"
#include "ads1015.h"

XIicPs Iic;		/**< Instance of the IIC Device */

int I2C_write(u32 ZynqIicAddress, u8 slave_address, u8 register_offset, u8 write_value);
int I2C_read(u32 ZynqIicAddress, u8 slave_address, u8 register_offset, u8 *read_value);

int main(){
//	XIicPs Iic;		/**< Instance of the IIC Device */
	XIicPs_Config *Config;
	int Status, i;
	u8 value = 0;

	// Fetch i2c parameters from config lut and init the peripheral
	Config = XIicPs_LookupConfig(XPAR_XIICPS_0_DEVICE_ID);
	Status = XIicPs_CfgInitialize(&Iic, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	// Perform self-test
	Status = XIicPs_SelfTest(&Iic);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	//Set the IIC serial clock rate.
	XIicPs_SetSClk(&Iic, 100000);
    printf("PS I2C Initialized\n\r");

    while(1){
    	Status = I2C_read(XPAR_XIICPS_0_DEVICE_ID, ADS1015_ADDRESS,
    			ADS1015_REG_POINTER_CONFIG, &value);
    	for(i = 0; i < 100000; i++){};
    }

}


int I2C_write(u32 ZynqIicAddress, u8 slave_address, u8 register_offset, u8 write_value)
/*
* \brief       Use the Zynq IIC Controller to write a value to a
*              MAX44000 register at a given offset
*
* \param[in]   ZynqIicAddress    - address of the I2C Controller
* \param[in]   slave_address     - address of the slave peripheral to read from
* \param[in]   register_offset   - offset of register inside the MAX44000
* \param[in]   write_value       - value to be written to MAX44000 register
*
* \return      XST_SUCCESS if operation succeeded
*/
{
	int Status = XST_SUCCESS;
	u8 TxBuffer[128]; // Only need this to be size 2, but making larger for future use

	TxBuffer[0] = register_offset;  // Offset of register to write
	TxBuffer[1] = write_value;  // value to write there
	/* TODO:
	 *  Add code to send multiple bytes:
	 *  - Setup function interface to receive multiple tx data bytes;
	 *  - Put, in TxBuffer, write register offst and all the data bytes;
	 *  - Send to the slave address & specified register all the data bytes
	 *  Old: The first byte of TxBuffer contains the offset to the register
	 *  inside the MAX44000. The second byte contains the data to be
	 *  written to that register. If the transfer fails, then
	 *  set Status to XST_FAILURE
	 */
	Status = XIicPs_MasterSendPolled(&Iic, TxBuffer, 2, slave_address);
	if (Status != XST_SUCCESS) return XST_FAILURE;
	//Wait until bus is idle to start another transfer.
	while (XIicPs_BusIsBusy(&Iic)) {/* NOP */}

	return(Status);
}

int I2C_read(u32 ZynqIicAddress, u8 slave_address, u8 register_offset, u8 *read_value)
/*
* \brief       Use the Zynq IIC Controller to read a value from a
*              slave register at a given offset
*
* \param[in]   ZynqIicAddress    - address of the I2C Controller
* \param[in]   slave_address     - address of the slave peripheral to read from
* \param[in]   register_offset   - offset of register inside the MAX44000
* \param[in]   *read_value       - pointer to data read from MAX44000 register
*
* \return      XST_SUCCESS if operation succeeded
*/
{
	int Status = XST_SUCCESS, i;
	u8 TxBuffer[128]; // Only need this to be size 1, but making larger for future use
	u8 RxBuffer[128]; // Only need this to be size 1, but making larger for future use

	TxBuffer[0] = register_offset;
	/* TODO: Match the write function to support multiple data bytes
	 *  Add code to send 1 byte contained in TxBuffer over I2C to
	 *  the device responding to I2C address MAX44000_IIC_ADDRESS.
	 *  TxBuffer contains the offset to the register
	 *  inside the MAX44000. If the transfer fails, then
	 *  set Status to XST_FAILURE
	 */
	Status = XIicPs_MasterSendPolled(&Iic, TxBuffer, 1, slave_address);
	if (Status != XST_SUCCESS) return XST_FAILURE;
	//Wait until bus is idle to start another transfer.
	while (XIicPs_BusIsBusy(&Iic)) {/* NOP */}

	/* ADD HERE
	 *  Add code to receive 1 byte into RxBuffer over I2C from
	 *  the device responding to I2C address MAX44000_IIC_ADDRESS.
	 *  Since we previously sent the offset to the register
	 *  inside the MAX44000, the MAX44000 will now return the data
	 *  contained within that register. If the transfer fails, then
	 *  set Status to XST_FAILURE
	 */
	Status = XIicPs_MasterRecvPolled(&Iic, RxBuffer, 1, slave_address);
	if (Status != XST_SUCCESS)
		return XST_FAILURE;

	if(Status==XST_SUCCESS)
		*read_value = RxBuffer[0];

//	usleep(100000); // Delay 100 ms, which is 100K us
	for(i = 0; i < 100000; i++){};
	return(Status);
}


